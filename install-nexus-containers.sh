#!/bin/bash
set -e
set -o pipefail

echo "üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
sudo apt update && sudo apt upgrade -y
sudo apt install -y build-essential pkg-config libssl-dev git-all unzip curl screen protobuf-compiler cargo expect git

# Rust (–µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç)
if ! command -v cargo &>/dev/null; then
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  [ -f "$HOME/.cargo/env" ] && source $HOME/.cargo/env
  export PATH="$HOME/.cargo/bin:$PATH"
  echo 'export PATH="$HOME/.cargo/bin:$PATH"' >> ~/.bashrc
fi
[ -f "$HOME/.cargo/env" ] && source $HOME/.cargo/env
export PATH="$HOME/.cargo/bin:$PATH"
rustup update

# Protobuf
sudo apt remove -y protobuf-compiler
curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v25.2/protoc-25.2-linux-x86_64.zip
unzip -o protoc-25.2-linux-x86_64.zip -d $HOME/.local
echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc
export PATH="$HOME/.local/bin:$PATH"

# Docker
if ! command -v docker &>/dev/null; then
  echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker..."
  curl -fsSL https://get.docker.com -o get-docker.sh
  sh get-docker.sh
  sudo systemctl enable docker
  sudo systemctl start docker
  rm get-docker.sh
fi

NEXUS_BIN="$HOME/.nexus/bin"
mkdir -p "$NEXUS_BIN"

echo "üî® –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π nexus-network –∞–≤—Ç–æ–∏–Ω—Å—Ç–∞–ª–ª—è—Ç–æ—Ä–æ–º..."
cd $HOME
rm -rf ~/.nexus
expect <<EOF
spawn bash -c "curl https://cli.nexus.xyz/ | sh"
expect {
    "Do you agree to the Nexus Beta Terms of Use*" {
        send "y\r"
        exp_continue
    }
    eof
}
EOF

BINARY="$HOME/.nexus/bin/nexus-network"
GLIBC_OK=0
if [ -f "$BINARY" ]; then
  echo "‚úÖ –ë–∏–Ω–∞—Ä–Ω–∏–∫ —Å–∫–∞—á–∞–Ω. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å glibc..."
  if "$BINARY" --help >/dev/null 2>&1; then
    echo "‚úÖ –ë–∏–Ω–∞—Ä–Ω–∏–∫ —Ä–∞–±–æ—á–∏–π –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º."
    GLIBC_OK=1
  else
    echo "‚ùå –ë–∏–Ω–∞—Ä–Ω–∏–∫ –Ω–µ —Å–æ–≤–º–µ—Å—Ç–∏–º –∏–ª–∏ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è. –ë—É–¥–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é."
  fi
else
  echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –±–∏–Ω–∞—Ä–Ω–∏–∫. –ë—É–¥–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é."
fi

if [ "$GLIBC_OK" = "0" ]; then
  echo "üî® –ö–ª–æ–Ω–∏—Ä—É–µ–º –∏ —Å–æ–±–∏—Ä–∞–µ–º nexus-network –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤..."
  rm -rf nexus-cli
  git clone https://github.com/nexus-xyz/nexus-cli.git
  cd nexus-cli/clients/cli
  cargo build --release
  cp target/release/nexus-network "$NEXUS_BIN/"
  export PATH="$NEXUS_BIN:$PATH"
  echo 'export PATH="$HOME/.nexus/bin:$PATH"' >> ~/.bashrc
fi

# --- –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ---
DIR="$HOME/nexus-docker"
mkdir -p "$DIR"
cd "$DIR"

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ nodeid.txt ---
NODEID_FILE="$HOME/nodeid.txt"
if [ ! -f "$NODEID_FILE" ]; then
  echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω $NODEID_FILE (–æ–∂–∏–¥–∞–µ—Ç—Å—è –≤ $NODEID_FILE)"
  exit 1
fi

mapfile -t NODE_IDS < <(sed 's/^[ \t]*//;s/[ \t]*$//' "$NODEID_FILE")
COUNT=${#NODE_IDS[@]}
echo "üî¢ –ù–∞–π–¥–µ–Ω–æ $COUNT node ID"

# --- Dockerfile ---
cat > Dockerfile <<'EOF'
FROM ubuntu:22.04
ENV DEBIAN_FRONTEND=noninteractive
SHELL ["/bin/bash", "-c"]
RUN apt update && apt upgrade -y && \
    apt install -y curl unzip libssl-dev screen
COPY nexus-network /usr/local/bin/nexus-network
COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /usr/local/bin/nexus-network /entrypoint.sh
CMD ["/entrypoint.sh"]
EOF

# --- Entrypoint ---
cat > entrypoint.sh <<'EOF'
#!/bin/bash
set -e
if [ -z "$NODE_ID" ]; then
  echo "‚ùå NODE_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"
  exit 1
fi
echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º screen 'nexus' —Å NODE_ID=$NODE_ID..."
screen -dmS nexus bash -c "nexus-network start --node-id $NODE_ID"
tail -f /dev/null
EOF

chmod +x entrypoint.sh

# --- –ö–æ–ø–∏—Ä—É–µ–º –±–∏–Ω–∞—Ä–Ω–∏–∫ ---
cp $HOME/.nexus/bin/nexus-network .

# --- docker-compose.yml ---
cat > docker-compose.yml <<EOF
services:
EOF

for i in "${!NODE_IDS[@]}"; do
  NODE_ID="$(echo "${NODE_IDS[$i]}" | xargs)"
  SERVICE_NAME="node_$NODE_ID"
  cat >> docker-compose.yml <<EOF
  $SERVICE_NAME:
    build: .
    container_name: "$SERVICE_NAME"
    tty: true
    stdin_open: true
    environment:
      - NODE_ID=$NODE_ID
EOF
done

# --- –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ ---
echo "üöÄ –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã..."
docker compose build

echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
docker compose up -d

echo ""
echo "‚úÖ –í—Å–µ $COUNT –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ screen-—Å–µ—Å—Å–∏—è—Ö 'nexus'"
echo "–ü—Ä–∏–º–µ—Ä –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ª–æ–≥: docker exec -it node_${NODE_IDS[0]} screen -r nexus"
